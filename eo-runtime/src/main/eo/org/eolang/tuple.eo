# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

# Tuple.
[head tail] > tuple
  # Empty tuple.
  [] > empty
    # Take one element from the tuple, at the given position.
    [i] > at
      error "Can't get an object from the empty tuple" > @
    # Take one element from the tuple, at the given position.
    [x] > with
      tuple > @
        tuple.empty
        x
    0 > length

  # Obtain the length of the tuple.
  [] > length
    ^.head.length.plus 1 > len!
    int len > @

  # Take one element from the tuple, at the given position.
  # @todo #2931:30min Return previous optimizations for the object.
  #  The optimization was removed because it does not work with new rho logic.
  #  Please check previous version of the object and try to implement it again.
  #  Also we need to enable the tuple tests: at-without-checks-with-first-element,
  #  at-without-checks-with-last-element
  [i] > at
    i > idx!
    ^.length > len
    if > index!
      0.gt idx
      len.plus idx
      idx
    if > @
      or.
        0.gt index
        len.lte index
      error "Given index is out of tuple bounds"
      if
        gt.
          len.plus -1
          index
        ^.head.at index
        ^.tail

  # Create a new tuple with this element added to the end of it.
  [x] > with
    tuple > @
      ^
      x
